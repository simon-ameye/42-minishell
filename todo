TODO

- refaire le getwords pour au il divise correctement a>b et cat a > > b
- poursuivre getfds
- historique
- C-c, C-v, C-\

- chevron perd siginfication into both s and d quotes
- dollar  perd signification into s quotes

____________________________________________
TESTS

cat | cat | ls
cat < Makefile > out | grep all
cd / | cd /

Warning ! ouble auotes from env expand should be kept, ex :
arg='"hello"'
<echo $arg> should return  <"hello">
I hope that : execve(ECHOPATH, {["arg"], [], []}) returns "hello"
<asxsax asx as sx| dkmsc | sx |> bugue !!

var='<'
echo $var file

cat < bar | echo "<" | cat <  | echo < bar
___________________________________________


digraph G
{

    subgraph cluster_lexer
    {
        label = "LEXER\n";
        
        a [label="GET_PROCS :\ncreate `t_proc` array (nb of pipes + 1)\n"]
        b [label="GET_TOKENS : \nDetect words thx to spaces and quotes \n Do not removes quotes"]
    }

    subgraph cluster_parser
    {
        label = "PARSER\nIretates upon `procs` and `tokens`";
        
        c [label="DOLLAR_EXPAND :\nreplace $text by value in env\nSet token IS_EXPENDED to avoid redirecting expended <\n"]
        e [label="GET_TOKEN_TYPE : \ndetect function, or meaning of the token\n set a number : 0 for execve, 1 for echo..., for < \n"]
        d [label="GET_REDIRS :\nParse chevrons + files names\n Open all files, set FDs in tokens\n remove files names + chevrons"]
        dd [label="Remove quotes and reoves empty words (ex : \"\")"]
        f [label="GET_PATH : \ndetect function path\n only for 0 execve\n"]
    }
    g [label="CREATE_CHILDREN : \n fork(), set dup2() according to fds"]
    h [label="LAUNCH_PROCESSES (CHILDS) : \nWARNING ; ne pas forker si pas de pipe seulemen t pour les buildin\n close les fd"]
    i [label="ENDING : \n wait PIDS, free mem, return errors...\n close les fds"]

        process_data [label="PROCESS_DATA\n\
        string\n\
        tab of tokens\n\
        path (as requested by execve)\n\
        func_type\n\
        input stream\n\
        output stream\n\
        is_last\n\
        MORE USEFUL DATA"]
        
        tokens [label="TOKENS\n\
        Null terminated pointer tab\l\
        char    *word\l\
        int     *is_expanded\l\
        \n\
        "]

    a -> b -> c
    f -> g -> h ->i
    c -> e -> d -> dd -> f
    process_data -> tokens
}
_________________________________
