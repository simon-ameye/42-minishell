TODO

- refaire le getwords pour au il divise correctement a>b et cat a > > b
- poursuivre getfds
- historique
- C-c, C-v, C-\

- chevron perd siginfication into both s and d quotes
- dollar  perd signification into s quotes

____________________________________________
TESTS

cat | cat | ls
cat < Makefile > out | grep all
cd / | cd /

Warning ! ouble auotes from env expand should be kept, ex :
arg='"hello"'
<echo $arg> should return  <"hello">
I hope that : execve(ECHOPATH, {["arg"], [], []}) returns "hello"
<asxsax asx as sx| dkmsc | sx |> bugue !!

var='<'
echo $var file

cat < bar | echo "<" | cat <  | echo < bar
____________________________________________

digraph G {

    a [label="TOKENISATIONS :\ncreate tokens (nb of pipes + 1)\n"]
    b [label="GET_WORDS : \nDetect words thx to spaces and quotes \nremoves quotes"]
    c [label="DOLLAR_EXPAND :\nreplace $text by value in env\n\n"]
    d [label="GET_FTYPE : \ndetect function (first word)\n set a number : 0 for execve, 1 for echo...\n"]
    e [label="GET_PATH : \ndetect function path\n only for 0 execve, 1\n"]
    f [label="FILE_OPENING : \nParse chevrons + files names\n Open all files, set FDs in tokens\n remove files names + chevrons"]
    g [label="CREATE_CHILDREN : \n fork(), set dup2() according to fds"]
    h [label="LAUNCH_PROCESSES (CHILDS) : \nWARNING ; ne pas forker si pas de pipe seulemen t pour les buildin\n close les fd"]
    i [label="ENDING : \n wait PIDS, free mem, return errors...\n close les fds"]

    token [label="TOKEN\n\
        string\n\
        env\n\
        path (as requested by execve)\n\
        func_type\n\
        function args (as requested by execve)\n\
        input stream\n\
        output stream\n\
        is_last\n\
        MORE USEFUL DATA"]

    a -> b -> c -> d -> e -> f -> g -> h -> i

}
____________________________________________
